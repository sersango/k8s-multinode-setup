---
- hosts: all
  become: true
  tasks:
  - name: Work out the distribution
    command: lsb_release -sc
    register: distribution

  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ distribution.stdout }} stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - containerd.io=1.2.10-3
      - docker-ce=5:19.03.6~3-0~ubuntu-{{ distribution.stdout }}
      - docker-ce-cli=5:19.03.6~3-0~ubuntu-{{ distribution.stdout }}

  - name: Use "systemd" as the Docker cgroup driver
    blockinfile:
      path: /etc/docker/daemon.json
      create: yes
      marker: ""
      block: |2
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "100m"
          },
          "storage-driver": "overlay2"
        }

  - name: Create Docker service directory
    file:
      path: /etc/systemd/system/docker.service.d
      state: directory
      mode: '0755'

  - name: Restart Docker service
    service:
      name: docker
      daemon_reload: yes
      state: restarted
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  # Kubelet will not start if the system has swap enabled, so we are disabling swap
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  # Installing kubelet, kubeadm and kubectl
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-{{ distribution.stdout }} main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet
        - kubeadm
        - kubectl

  - name: Configure node ip
    lineinfile:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      line: 'Environment="KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}"'
      regexp: 'KUBELET_EXTRA_ARGS='
      insertafter: '\[Service\]'
      state: present

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  # Initialize the Kubernetes cluster with kubeadm
  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address={{ node_ip }} --apiserver-cert-extra-sans={{ node_ip }} --node-name k8s-master --pod-network-cidr=192.168.0.0/16

  # Setup the kube config file for the vagrant user to access the Kubernetes cluster
  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p {{ ansible_env.PWD }}/.kube
     - cp -i /etc/kubernetes/admin.conf {{ ansible_env.PWD }}/.kube/config
     - chown vagrant:docker {{ ansible_env.PWD }}/.kube/config
    args:
      warn: no

  # Setup the container networking provider and the network policy engine using the below code.
  - name: Install pod network
    become: false
    command: kubectl apply -f https://docs.projectcalico.org/v3.11/manifests/calico.yaml

  # Generate kube join command for joining the node to the Kubernetes cluster and store the command in the file named join-command
  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content={{ join_command.stdout_lines[0] }} dest=./join-command
    become: false

  # Setup a handler for checking Docker daemon
  handlers:
    - name: docker status
      service: name=docker state=started
